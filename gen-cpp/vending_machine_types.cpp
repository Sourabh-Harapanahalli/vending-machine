/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "vending_machine_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace vending_machine {

int _kWeatherTypeValues[] = {
  WeatherType::WARM,
  WeatherType::COLD
};
const char* _kWeatherTypeNames[] = {
  "WARM",
  "COLD"
};
const std::map<int, const char*> _WeatherType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kWeatherTypeValues, _kWeatherTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const WeatherType::type& val) {
  std::map<int, const char*>::const_iterator it = _WeatherType_VALUES_TO_NAMES.find(val);
  if (it != _WeatherType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const WeatherType::type& val) {
  std::map<int, const char*>::const_iterator it = _WeatherType_VALUES_TO_NAMES.find(val);
  if (it != _WeatherType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kBeverageTypeValues[] = {
  BeverageType::HOT,
  BeverageType::COLD
};
const char* _kBeverageTypeNames[] = {
  "HOT",
  "COLD"
};
const std::map<int, const char*> _BeverageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kBeverageTypeValues, _kBeverageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const BeverageType::type& val) {
  std::map<int, const char*>::const_iterator it = _BeverageType_VALUES_TO_NAMES.find(val);
  if (it != _BeverageType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const BeverageType::type& val) {
  std::map<int, const char*>::const_iterator it = _BeverageType_VALUES_TO_NAMES.find(val);
  if (it != _BeverageType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


location::~location() noexcept {
}


void location::__set_location_id(const int64_t val) {
  this->location_id = val;
}

void location::__set_city(const int64_t val) {
  this->city = val;
}
std::ostream& operator<<(std::ostream& out, const location& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t location::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->location_id);
          this->__isset.location_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->city);
          this->__isset.city = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t location::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("location");

  xfer += oprot->writeFieldBegin("location_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->location_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("city", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->city);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(location &a, location &b) {
  using ::std::swap;
  swap(a.location_id, b.location_id);
  swap(a.city, b.city);
  swap(a.__isset, b.__isset);
}

location::location(const location& other0) {
  location_id = other0.location_id;
  city = other0.city;
  __isset = other0.__isset;
}
location& location::operator=(const location& other1) {
  location_id = other1.location_id;
  city = other1.city;
  __isset = other1.__isset;
  return *this;
}
void location::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "location(";
  out << "location_id=" << to_string(location_id);
  out << ", " << "city=" << to_string(city);
  out << ")";
}

} // namespace
